{"ast":null,"code":"import axios from 'axios';\n\nconst fetchProduct = () => {\n  return axios.get(\"http://127.0.0.1:8000/api/product/1\");\n};\n\nconst fetchProducts = (order, page) => {\n  return axios.get(\"http://127.0.0.1:8000/api/products/\" + order + \"?page=\" + page);\n};\n\nconst fetchBrands = () => {\n  return axios.get(\"http://127.0.0.1:8000/api/brands\");\n};\n\nconst fetchFilteredProducts = (brand, season, size, from, to, order, page) => {\n  return axios.get(\"http://127.0.0.1:8000/api/filter?brand=\" + brand + \"&season=\" + season + \"&size=\" + size + \"&from=\" + from + \"&to=\" + to + \"&order=\" + order + \"&page=\" + page);\n};\n\nfunction wrapPromise(promise) {\n  let status = \"pending\";\n  let result;\n  let suspender = promise.then(r => {\n    status = \"success\";\n    result = r;\n  }, e => {\n    status = \"error\";\n    result = e;\n  });\n  return {\n    read() {\n      if (status === \"pending\") {\n        throw suspender;\n      } else if (status === \"error\") {\n        throw result;\n      }\n\n      return result;\n    }\n\n  };\n}\n\n;\nexport function fetchProductsData(order = \"up\", page = \"1\") {\n  let productPromise = fetchProducts(order, page);\n  return {\n    products: wrapPromise(productPromise)\n  };\n}\n;\nexport function fetchFilteredProductsData(brand, season, size, from, to) {\n  let filteredProductsPromise = fetchFilteredProducts(brand, season, size, from, to);\n  return {\n    products: wrapPromise(filteredProductsPromise)\n  };\n}\nexport function fetchProductData() {\n  let productPromise = fetchProduct();\n  return {\n    product: wrapPromise(productPromise)\n  };\n}\n;\nexport function fetchBrandsData() {\n  let brandsPromise = fetchBrands();\n  return {\n    brands: wrapPromise(brandsPromise)\n  };\n}\n;","map":{"version":3,"sources":["E:/django_projects/cloth_shop_django_react/frontend/cloth_shop/src/FetchProductApi.js"],"names":["axios","fetchProduct","get","fetchProducts","order","page","fetchBrands","fetchFilteredProducts","brand","season","size","from","to","wrapPromise","promise","status","result","suspender","then","r","e","read","fetchProductsData","productPromise","products","fetchFilteredProductsData","filteredProductsPromise","fetchProductData","product","fetchBrandsData","brandsPromise","brands"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,YAAY,GAAG,MAAM;AACvB,SAAOD,KAAK,CAACE,GAAN,CAAU,qCAAV,CAAP;AACH,CAFD;;AAIA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACnC,SAAOL,KAAK,CAACE,GAAN,CAAU,wCAAwCE,KAAxC,GAAgD,QAAhD,GAA2DC,IAArE,CAAP;AACH,CAFD;;AAIA,MAAMC,WAAW,GAAG,MAAM;AACtB,SAAON,KAAK,CAACE,GAAN,CAAU,kCAAV,CAAP;AACH,CAFD;;AAIA,MAAMK,qBAAqB,GAAG,CAACC,KAAD,EAAOC,MAAP,EAAcC,IAAd,EAAmBC,IAAnB,EAAwBC,EAAxB,EAA4BR,KAA5B,EAAmCC,IAAnC,KAA4C;AACtE,SAAOL,KAAK,CAACE,GAAN,CAAU,4CAA4CM,KAA5C,GAAoD,UAApD,GAAiEC,MAAjE,GACb,QADa,GACFC,IADE,GACK,QADL,GACgBC,IADhB,GACuB,MADvB,GACgCC,EADhC,GACqC,SADrC,GACiDR,KADjD,GACyD,QADzD,GACoEC,IAD9E,CAAP;AAEH,CAHD;;AAKA,SAASQ,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,MAAIC,MAAM,GAAG,SAAb;AACA,MAAIC,MAAJ;AACA,MAAIC,SAAS,GAAGH,OAAO,CAACI,IAAR,CACdC,CAAC,IAAI;AACHJ,IAAAA,MAAM,GAAG,SAAT;AACAC,IAAAA,MAAM,GAAGG,CAAT;AACD,GAJa,EAKdC,CAAC,IAAI;AACHL,IAAAA,MAAM,GAAG,OAAT;AACAC,IAAAA,MAAM,GAAGI,CAAT;AACD,GARa,CAAhB;AAWA,SAAO;AACLC,IAAAA,IAAI,GAAG;AACL,UAAIN,MAAM,KAAK,SAAf,EAA0B;AACxB,cAAME,SAAN;AACD,OAFD,MAEO,IAAIF,MAAM,KAAK,OAAf,EAAwB;AAC7B,cAAMC,MAAN;AACD;;AACD,aAAOA,MAAP;AACD;;AARI,GAAP;AAUD;;AAAA;AAED,OAAO,SAASM,iBAAT,CAA2BlB,KAAK,GAAC,IAAjC,EAAuCC,IAAI,GAAC,GAA5C,EAAiD;AACpD,MAAIkB,cAAc,GAAGpB,aAAa,CAACC,KAAD,EAAQC,IAAR,CAAlC;AAEA,SAAO;AACHmB,IAAAA,QAAQ,EAAEX,WAAW,CAACU,cAAD;AADlB,GAAP;AAGH;AAAA;AAED,OAAO,SAASE,yBAAT,CAAmCjB,KAAnC,EAAyCC,MAAzC,EAAgDC,IAAhD,EAAqDC,IAArD,EAA0DC,EAA1D,EAA8D;AACjE,MAAIc,uBAAuB,GAAGnB,qBAAqB,CAACC,KAAD,EAAOC,MAAP,EAAcC,IAAd,EAAmBC,IAAnB,EAAwBC,EAAxB,CAAnD;AAEA,SAAO;AACHY,IAAAA,QAAQ,EAAEX,WAAW,CAACa,uBAAD;AADlB,GAAP;AAGH;AAED,OAAO,SAASC,gBAAT,GAA4B;AAC/B,MAAIJ,cAAc,GAAGtB,YAAY,EAAjC;AAEA,SAAO;AACH2B,IAAAA,OAAO,EAAEf,WAAW,CAACU,cAAD;AADjB,GAAP;AAIH;AAAA;AAED,OAAO,SAASM,eAAT,GAA2B;AAC9B,MAAIC,aAAa,GAAGxB,WAAW,EAA/B;AAEA,SAAO;AACHyB,IAAAA,MAAM,EAAElB,WAAW,CAACiB,aAAD;AADhB,GAAP;AAGH;AAAA","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nconst fetchProduct = () => {\r\n    return axios.get(\"http://127.0.0.1:8000/api/product/1\")\r\n}\r\n\r\nconst fetchProducts = (order, page) => {\r\n    return axios.get(\"http://127.0.0.1:8000/api/products/\" + order + \"?page=\" + page)\r\n}\r\n\r\nconst fetchBrands = () => {\r\n    return axios.get(\"http://127.0.0.1:8000/api/brands\")\r\n}\r\n\r\nconst fetchFilteredProducts = (brand,season,size,from,to, order, page) => {\r\n    return axios.get(\"http://127.0.0.1:8000/api/filter?brand=\" + brand + \"&season=\" + season +\r\n        \"&size=\" + size + \"&from=\" + from + \"&to=\" + to + \"&order=\" + order + \"&page=\" + page)\r\n}\r\n\r\nfunction wrapPromise(promise) {\r\n  let status = \"pending\";\r\n  let result;\r\n  let suspender = promise.then(\r\n    r => {\r\n      status = \"success\";\r\n      result = r;\r\n    },\r\n    e => {\r\n      status = \"error\";\r\n      result = e;\r\n    }\r\n  );\r\n\r\n  return {\r\n    read() {\r\n      if (status === \"pending\") {\r\n        throw suspender;\r\n      } else if (status === \"error\") {\r\n        throw result;\r\n      }\r\n      return result;\r\n    }\r\n  };\r\n};\r\n\r\nexport function fetchProductsData(order=\"up\", page=\"1\") {\r\n    let productPromise = fetchProducts(order, page);\r\n\r\n    return {\r\n        products: wrapPromise(productPromise)\r\n    };\r\n};\r\n\r\nexport function fetchFilteredProductsData(brand,season,size,from,to) {\r\n    let filteredProductsPromise = fetchFilteredProducts(brand,season,size,from,to)\r\n\r\n    return {\r\n        products: wrapPromise(filteredProductsPromise)\r\n    }\r\n}\r\n\r\nexport function fetchProductData() {\r\n    let productPromise = fetchProduct();\r\n\r\n    return {\r\n        product: wrapPromise(productPromise)\r\n    };\r\n\r\n};\r\n\r\nexport function fetchBrandsData() {\r\n    let brandsPromise = fetchBrands();\r\n\r\n    return {\r\n        brands: wrapPromise(brandsPromise)\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}