{"ast":null,"code":"/** @license React vundefined\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var enableSchedulerDebugging = false;\n    var enableProfiling = false;\n\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n\n    function peek(heap) {\n      var first = heap[0];\n      return first === undefined ? null : first;\n    }\n\n    function pop(heap) {\n      var first = heap[0];\n\n      if (first !== undefined) {\n        var last = heap.pop();\n\n        if (last !== first) {\n          heap[0] = last;\n          siftDown(heap, last, 0);\n        }\n\n        return first;\n      } else {\n        return null;\n      }\n    }\n\n    function siftUp(heap, node, i) {\n      var index = i;\n\n      while (true) {\n        var parentIndex = index - 1 >>> 1;\n        var parent = heap[parentIndex];\n\n        if (parent !== undefined && compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n\n      while (index < length) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (left !== undefined && compare(left, node) < 0) {\n          if (right !== undefined && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (right !== undefined && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    } // TODO: Use symbols?\n\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n\n    function markTaskErrored(task, ms) {}\n    /* eslint-disable no-var */\n\n\n    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n    if (hasPerformanceNow) {\n      var localPerformance = performance;\n\n      exports.unstable_now = function () {\n        return localPerformance.now();\n      };\n    } else {\n      var localDate = Date;\n      var initialTime = localDate.now();\n\n      exports.unstable_now = function () {\n        return localDate.now() - initialTime;\n      };\n    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\n    var setTimeout = window.setTimeout;\n    var clearTimeout = window.clearTimeout;\n    var setImmediate = window.setImmediate; // IE and Node.js + jsdom\n\n    if (typeof console !== 'undefined') {\n      // TODO: Scheduler no longer requires these methods to be polyfilled. But\n      // maybe we want to continue warning if they don't exist, to preserve the\n      // option to rely on it in the future?\n      var requestAnimationFrame = window.requestAnimationFrame;\n      var cancelAnimationFrame = window.cancelAnimationFrame;\n\n      if (typeof requestAnimationFrame !== 'function') {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n      }\n\n      if (typeof cancelAnimationFrame !== 'function') {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n      }\n    }\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n\n        timer = peek(timerQueue);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = exports.unstable_now();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            throw error;\n          }\n        } else {\n          // No catch in prod code path.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n      }\n    }\n\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n\n      while (currentTask !== null && !enableSchedulerDebugging) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n\n        var callback = currentTask.callback;\n\n        if (typeof callback === 'function') {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = exports.unstable_now();\n\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n          } else {\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n\n        return false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n      } else {\n        startTime = currentTime;\n      }\n\n      var timeout;\n\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n          break;\n\n        case UserBlockingPriority:\n          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n          break;\n\n        case IdlePriority:\n          timeout = IDLE_PRIORITY_TIMEOUT;\n          break;\n\n        case LowPriority:\n          timeout = LOW_PRIORITY_TIMEOUT;\n          break;\n\n        case NormalPriority:\n        default:\n          timeout = NORMAL_PRIORITY_TIMEOUT;\n          break;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask); // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function unstable_pauseExecution() {}\n\n    function unstable_continueExecution() {\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n\n    function unstable_cancelCallback(task) {\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n      task.callback = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    var isMessageLoopRunning = false;\n    var scheduledHostCallback = null;\n    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n    // thread, like user events. By default, it yields multiple times per frame.\n    // It does not attempt to align with frame boundaries, since most tasks don't\n    // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n    var yieldInterval = 5;\n    var deadline = 0; // TODO: Make this configurable\n\n    function shouldYieldToHost() {\n      {\n        // `isInputPending` is not available. Since we have no way of knowing if\n        // there's pending input, always yield at the end of the frame.\n        return exports.unstable_now() >= deadline;\n      }\n    }\n\n    function requestPaint() {}\n\n    function forceFrameRate(fps) {\n      if (fps < 0 || fps > 125) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n        return;\n      }\n\n      if (fps > 0) {\n        yieldInterval = Math.floor(1000 / fps);\n      } else {\n        // reset the framerate\n        yieldInterval = 5;\n      }\n    }\n\n    var performWorkUntilDeadline = function () {\n      if (scheduledHostCallback !== null) {\n        var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n        // cycle. This means there's always time remaining at the beginning of\n        // the message event.\n\n        deadline = currentTime + yieldInterval;\n        var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n        // error can be observed.\n        //\n        // Intentionally not using a try-catch, since that makes some debugging\n        // techniques harder. Instead, if `scheduledHostCallback` errors, then\n        // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n        var hasMoreWork = true;\n\n        try {\n          hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n        } finally {\n          if (hasMoreWork) {\n            // If there's more work, schedule the next message event at the end\n            // of the preceding one.\n            schedulePerformWorkUntilDeadline();\n          } else {\n            isMessageLoopRunning = false;\n            scheduledHostCallback = null;\n          }\n        }\n      } else {\n        isMessageLoopRunning = false;\n      } // Yielding to the browser will give it a chance to paint, so we can\n\n    };\n\n    var schedulePerformWorkUntilDeadline;\n\n    if (typeof setImmediate === 'function') {\n      // Node.js and old IE.\n      // There's a few reasons for why we prefer setImmediate.\n      //\n      // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n      // (Even though this is a DOM fork of the Scheduler, you could get here\n      // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n      // https://github.com/facebook/react/issues/20756\n      //\n      // But also, it runs earlier which is the semantic we want.\n      // If other browsers ever implement it, it's better to use it.\n      // Although both of these would be inferior to native scheduling.\n      schedulePerformWorkUntilDeadline = function () {\n        setImmediate(performWorkUntilDeadline);\n      };\n    } else {\n      var channel = new MessageChannel();\n      var port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n\n      schedulePerformWorkUntilDeadline = function () {\n        port.postMessage(null);\n      };\n    }\n\n    function requestHostCallback(callback) {\n      scheduledHostCallback = callback;\n\n      if (!isMessageLoopRunning) {\n        isMessageLoopRunning = true;\n        schedulePerformWorkUntilDeadline();\n      }\n    }\n\n    function requestHostTimeout(callback, ms) {\n      taskTimeoutID = setTimeout(function () {\n        callback(exports.unstable_now());\n      }, ms);\n    }\n\n    function cancelHostTimeout() {\n      clearTimeout(taskTimeoutID);\n      taskTimeoutID = -1;\n    }\n\n    var unstable_requestPaint = requestPaint;\n    var unstable_Profiling = null;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_Profiling = unstable_Profiling;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_forceFrameRate = forceFrameRate;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_next = unstable_next;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_shouldYield = shouldYieldToHost;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}","map":{"version":3,"sources":["E:/django_projects/cloth_shop_django_react/frontend/cloth_shop/node_modules/scheduler/cjs/scheduler.development.js"],"names":["process","env","NODE_ENV","enableSchedulerDebugging","enableProfiling","push","heap","node","index","length","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","hasPerformanceNow","performance","now","localPerformance","exports","unstable_now","localDate","Date","initialTime","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","setTimeout","window","clearTimeout","setImmediate","console","requestAnimationFrame","cancelAnimationFrame","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","cancelHostTimeout","previousPriorityLevel","workLoop","error","isQueued","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","yieldInterval","deadline","requestPaint","forceFrameRate","fps","Math","floor","performWorkUntilDeadline","hasMoreWork","schedulePerformWorkUntilDeadline","channel","MessageChannel","port","port2","port1","onmessage","postMessage","unstable_requestPaint","unstable_Profiling","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority","unstable_forceFrameRate","unstable_shouldYield"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,GAAC,YAAW;AACd;;AAEA,QAAIC,wBAAwB,GAAG,KAA/B;AACA,QAAIC,eAAe,GAAG,KAAtB;;AAEA,aAASC,IAAT,CAAcC,IAAd,EAAoBC,IAApB,EAA0B;AACxB,UAAIC,KAAK,GAAGF,IAAI,CAACG,MAAjB;AACAH,MAAAA,IAAI,CAACD,IAAL,CAAUE,IAAV;AACAG,MAAAA,MAAM,CAACJ,IAAD,EAAOC,IAAP,EAAaC,KAAb,CAAN;AACD;;AACD,aAASG,IAAT,CAAcL,IAAd,EAAoB;AAClB,UAAIM,KAAK,GAAGN,IAAI,CAAC,CAAD,CAAhB;AACA,aAAOM,KAAK,KAAKC,SAAV,GAAsB,IAAtB,GAA6BD,KAApC;AACD;;AACD,aAASE,GAAT,CAAaR,IAAb,EAAmB;AACjB,UAAIM,KAAK,GAAGN,IAAI,CAAC,CAAD,CAAhB;;AAEA,UAAIM,KAAK,KAAKC,SAAd,EAAyB;AACvB,YAAIE,IAAI,GAAGT,IAAI,CAACQ,GAAL,EAAX;;AAEA,YAAIC,IAAI,KAAKH,KAAb,EAAoB;AAClBN,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUS,IAAV;AACAC,UAAAA,QAAQ,CAACV,IAAD,EAAOS,IAAP,EAAa,CAAb,CAAR;AACD;;AAED,eAAOH,KAAP;AACD,OATD,MASO;AACL,eAAO,IAAP;AACD;AACF;;AAED,aAASF,MAAT,CAAgBJ,IAAhB,EAAsBC,IAAtB,EAA4BU,CAA5B,EAA+B;AAC7B,UAAIT,KAAK,GAAGS,CAAZ;;AAEA,aAAO,IAAP,EAAa;AACX,YAAIC,WAAW,GAAGV,KAAK,GAAG,CAAR,KAAc,CAAhC;AACA,YAAIW,MAAM,GAAGb,IAAI,CAACY,WAAD,CAAjB;;AAEA,YAAIC,MAAM,KAAKN,SAAX,IAAwBO,OAAO,CAACD,MAAD,EAASZ,IAAT,CAAP,GAAwB,CAApD,EAAuD;AACrD;AACAD,UAAAA,IAAI,CAACY,WAAD,CAAJ,GAAoBX,IAApB;AACAD,UAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcW,MAAd;AACAX,UAAAA,KAAK,GAAGU,WAAR;AACD,SALD,MAKO;AACL;AACA;AACD;AACF;AACF;;AAED,aAASF,QAAT,CAAkBV,IAAlB,EAAwBC,IAAxB,EAA8BU,CAA9B,EAAiC;AAC/B,UAAIT,KAAK,GAAGS,CAAZ;AACA,UAAIR,MAAM,GAAGH,IAAI,CAACG,MAAlB;;AAEA,aAAOD,KAAK,GAAGC,MAAf,EAAuB;AACrB,YAAIY,SAAS,GAAG,CAACb,KAAK,GAAG,CAAT,IAAc,CAAd,GAAkB,CAAlC;AACA,YAAIc,IAAI,GAAGhB,IAAI,CAACe,SAAD,CAAf;AACA,YAAIE,UAAU,GAAGF,SAAS,GAAG,CAA7B;AACA,YAAIG,KAAK,GAAGlB,IAAI,CAACiB,UAAD,CAAhB,CAJqB,CAIS;;AAE9B,YAAID,IAAI,KAAKT,SAAT,IAAsBO,OAAO,CAACE,IAAD,EAAOf,IAAP,CAAP,GAAsB,CAAhD,EAAmD;AACjD,cAAIiB,KAAK,KAAKX,SAAV,IAAuBO,OAAO,CAACI,KAAD,EAAQF,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AACnDhB,YAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcgB,KAAd;AACAlB,YAAAA,IAAI,CAACiB,UAAD,CAAJ,GAAmBhB,IAAnB;AACAC,YAAAA,KAAK,GAAGe,UAAR;AACD,WAJD,MAIO;AACLjB,YAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcc,IAAd;AACAhB,YAAAA,IAAI,CAACe,SAAD,CAAJ,GAAkBd,IAAlB;AACAC,YAAAA,KAAK,GAAGa,SAAR;AACD;AACF,SAVD,MAUO,IAAIG,KAAK,KAAKX,SAAV,IAAuBO,OAAO,CAACI,KAAD,EAAQjB,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AAC1DD,UAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcgB,KAAd;AACAlB,UAAAA,IAAI,CAACiB,UAAD,CAAJ,GAAmBhB,IAAnB;AACAC,UAAAA,KAAK,GAAGe,UAAR;AACD,SAJM,MAIA;AACL;AACA;AACD;AACF;AACF;;AAED,aAASH,OAAT,CAAiBK,CAAjB,EAAoBC,CAApB,EAAuB;AACrB;AACA,UAAIC,IAAI,GAAGF,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAA3B;AACA,aAAOD,IAAI,KAAK,CAAT,GAAaA,IAAb,GAAoBF,CAAC,CAACI,EAAF,GAAOH,CAAC,CAACG,EAApC;AACD,KAtFa,CAwFd;;;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,oBAAoB,GAAG,CAA3B;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,YAAY,GAAG,CAAnB;;AAEA,aAASC,eAAT,CAAyBC,IAAzB,EAA+BC,EAA/B,EAAmC,CAClC;AAED;;;AAEA,QAAIC,iBAAiB,GAAG,OAAOC,WAAP,KAAuB,QAAvB,IAAmC,OAAOA,WAAW,CAACC,GAAnB,KAA2B,UAAtF;;AAEA,QAAIF,iBAAJ,EAAuB;AACrB,UAAIG,gBAAgB,GAAGF,WAAvB;;AAEAG,MAAAA,OAAO,CAACC,YAAR,GAAuB,YAAY;AACjC,eAAOF,gBAAgB,CAACD,GAAjB,EAAP;AACD,OAFD;AAGD,KAND,MAMO;AACL,UAAII,SAAS,GAAGC,IAAhB;AACA,UAAIC,WAAW,GAAGF,SAAS,CAACJ,GAAV,EAAlB;;AAEAE,MAAAA,OAAO,CAACC,YAAR,GAAuB,YAAY;AACjC,eAAOC,SAAS,CAACJ,GAAV,KAAkBM,WAAzB;AACD,OAFD;AAGD,KAnHa,CAmHZ;AACF;AACA;;;AAGA,QAAIC,iBAAiB,GAAG,UAAxB,CAxHc,CAwHsB;;AAEpC,QAAIC,0BAA0B,GAAG,CAAC,CAAlC,CA1Hc,CA0HuB;;AAErC,QAAIC,8BAA8B,GAAG,GAArC;AACA,QAAIC,uBAAuB,GAAG,IAA9B;AACA,QAAIC,oBAAoB,GAAG,KAA3B,CA9Hc,CA8HoB;;AAElC,QAAIC,qBAAqB,GAAGL,iBAA5B,CAhIc,CAgIiC;;AAE/C,QAAIM,SAAS,GAAG,EAAhB;AACA,QAAIC,UAAU,GAAG,EAAjB,CAnIc,CAmIO;;AAErB,QAAIC,aAAa,GAAG,CAApB,CArIc,CAqIS;;AACvB,QAAIC,WAAW,GAAG,IAAlB;AACA,QAAIC,oBAAoB,GAAGzB,cAA3B,CAvIc,CAuI6B;;AAE3C,QAAI0B,gBAAgB,GAAG,KAAvB;AACA,QAAIC,uBAAuB,GAAG,KAA9B;AACA,QAAIC,sBAAsB,GAAG,KAA7B,CA3Ic,CA2IsB;;AAEpC,QAAIC,UAAU,GAAGC,MAAM,CAACD,UAAxB;AACA,QAAIE,YAAY,GAAGD,MAAM,CAACC,YAA1B;AACA,QAAIC,YAAY,GAAGF,MAAM,CAACE,YAA1B,CA/Ic,CA+I0B;;AAExC,QAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAClC;AACA;AACA;AACA,UAAIC,qBAAqB,GAAGJ,MAAM,CAACI,qBAAnC;AACA,UAAIC,oBAAoB,GAAGL,MAAM,CAACK,oBAAlC;;AAEA,UAAI,OAAOD,qBAAP,KAAiC,UAArC,EAAiD;AAC/C;AACAD,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiB,yDAAyD,4BAAzD,GAAwF,sEAAzG;AACD;;AAED,UAAI,OAAOE,oBAAP,KAAgC,UAApC,EAAgD;AAC9C;AACAF,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiB,wDAAwD,4BAAxD,GAAuF,sEAAxG;AACD;AACF;;AAED,aAASG,aAAT,CAAuBC,WAAvB,EAAoC;AAClC;AACA,UAAIC,KAAK,GAAG3D,IAAI,CAAC2C,UAAD,CAAhB;;AAEA,aAAOgB,KAAK,KAAK,IAAjB,EAAuB;AACrB,YAAIA,KAAK,CAACC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B;AACAzD,UAAAA,GAAG,CAACwC,UAAD,CAAH;AACD,SAHD,MAGO,IAAIgB,KAAK,CAACE,SAAN,IAAmBH,WAAvB,EAAoC;AACzC;AACAvD,UAAAA,GAAG,CAACwC,UAAD,CAAH;AACAgB,UAAAA,KAAK,CAAC1C,SAAN,GAAkB0C,KAAK,CAACG,cAAxB;AACApE,UAAAA,IAAI,CAACgD,SAAD,EAAYiB,KAAZ,CAAJ;AACD,SALM,MAKA;AACL;AACA;AACD;;AAEDA,QAAAA,KAAK,GAAG3D,IAAI,CAAC2C,UAAD,CAAZ;AACD;AACF;;AAED,aAASoB,aAAT,CAAuBL,WAAvB,EAAoC;AAClCT,MAAAA,sBAAsB,GAAG,KAAzB;AACAQ,MAAAA,aAAa,CAACC,WAAD,CAAb;;AAEA,UAAI,CAACV,uBAAL,EAA8B;AAC5B,YAAIhD,IAAI,CAAC0C,SAAD,CAAJ,KAAoB,IAAxB,EAA8B;AAC5BM,UAAAA,uBAAuB,GAAG,IAA1B;AACAgB,UAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD,SAHD,MAGO;AACL,cAAIC,UAAU,GAAGlE,IAAI,CAAC2C,UAAD,CAArB;;AAEA,cAAIuB,UAAU,KAAK,IAAnB,EAAyB;AACvBC,YAAAA,kBAAkB,CAACJ,aAAD,EAAgBG,UAAU,CAACL,SAAX,GAAuBH,WAAvC,CAAlB;AACD;AACF;AACF;AACF;;AAED,aAASO,SAAT,CAAmBG,gBAAnB,EAAqCjC,WAArC,EAAkD;AAGhDa,MAAAA,uBAAuB,GAAG,KAA1B;;AAEA,UAAIC,sBAAJ,EAA4B;AAC1B;AACAA,QAAAA,sBAAsB,GAAG,KAAzB;AACAoB,QAAAA,iBAAiB;AAClB;;AAEDtB,MAAAA,gBAAgB,GAAG,IAAnB;AACA,UAAIuB,qBAAqB,GAAGxB,oBAA5B;;AAEA,UAAI;AACF,YAAIrD,eAAJ,EAAqB;AACnB,cAAI;AACF,mBAAO8E,QAAQ,CAACH,gBAAD,EAAmBjC,WAAnB,CAAf;AACD,WAFD,CAEE,OAAOqC,KAAP,EAAc;AACd,gBAAI3B,WAAW,KAAK,IAApB,EAA0B;AACxB,kBAAIa,WAAW,GAAG3B,OAAO,CAACC,YAAR,EAAlB;AACAR,cAAAA,eAAe,CAACqB,WAAD,EAAca,WAAd,CAAf;AACAb,cAAAA,WAAW,CAAC4B,QAAZ,GAAuB,KAAvB;AACD;;AAED,kBAAMD,KAAN;AACD;AACF,SAZD,MAYO;AACL;AACA,iBAAOD,QAAQ,CAACH,gBAAD,EAAmBjC,WAAnB,CAAf;AACD;AACF,OAjBD,SAiBU;AACRU,QAAAA,WAAW,GAAG,IAAd;AACAC,QAAAA,oBAAoB,GAAGwB,qBAAvB;AACAvB,QAAAA,gBAAgB,GAAG,KAAnB;AACD;AACF;;AAED,aAASwB,QAAT,CAAkBH,gBAAlB,EAAoCjC,WAApC,EAAiD;AAC/C,UAAIuB,WAAW,GAAGvB,WAAlB;AACAsB,MAAAA,aAAa,CAACC,WAAD,CAAb;AACAb,MAAAA,WAAW,GAAG7C,IAAI,CAAC0C,SAAD,CAAlB;;AAEA,aAAOG,WAAW,KAAK,IAAhB,IAAwB,CAAErD,wBAAjC,EAA6D;AAC3D,YAAIqD,WAAW,CAACiB,cAAZ,GAA6BJ,WAA7B,KAA6C,CAACU,gBAAD,IAAqBM,iBAAiB,EAAnF,CAAJ,EAA4F;AAC1F;AACA;AACD;;AAED,YAAId,QAAQ,GAAGf,WAAW,CAACe,QAA3B;;AAEA,YAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCf,UAAAA,WAAW,CAACe,QAAZ,GAAuB,IAAvB;AACAd,UAAAA,oBAAoB,GAAGD,WAAW,CAAC8B,aAAnC;AACA,cAAIC,sBAAsB,GAAG/B,WAAW,CAACiB,cAAZ,IAA8BJ,WAA3D;AAEA,cAAImB,oBAAoB,GAAGjB,QAAQ,CAACgB,sBAAD,CAAnC;AACAlB,UAAAA,WAAW,GAAG3B,OAAO,CAACC,YAAR,EAAd;;AAEA,cAAI,OAAO6C,oBAAP,KAAgC,UAApC,EAAgD;AAC9ChC,YAAAA,WAAW,CAACe,QAAZ,GAAuBiB,oBAAvB;AACD,WAFD,MAEO;AAEL,gBAAIhC,WAAW,KAAK7C,IAAI,CAAC0C,SAAD,CAAxB,EAAqC;AACnCvC,cAAAA,GAAG,CAACuC,SAAD,CAAH;AACD;AACF;;AAEDe,UAAAA,aAAa,CAACC,WAAD,CAAb;AACD,SAlBD,MAkBO;AACLvD,UAAAA,GAAG,CAACuC,SAAD,CAAH;AACD;;AAEDG,QAAAA,WAAW,GAAG7C,IAAI,CAAC0C,SAAD,CAAlB;AACD,OApC8C,CAoC7C;;;AAGF,UAAIG,WAAW,KAAK,IAApB,EAA0B;AACxB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAIqB,UAAU,GAAGlE,IAAI,CAAC2C,UAAD,CAArB;;AAEA,YAAIuB,UAAU,KAAK,IAAnB,EAAyB;AACvBC,UAAAA,kBAAkB,CAACJ,aAAD,EAAgBG,UAAU,CAACL,SAAX,GAAuBH,WAAvC,CAAlB;AACD;;AAED,eAAO,KAAP;AACD;AACF;;AAED,aAASoB,wBAAT,CAAkCH,aAAlC,EAAiDI,YAAjD,EAA+D;AAC7D,cAAQJ,aAAR;AACE,aAAKxD,iBAAL;AACA,aAAKC,oBAAL;AACA,aAAKC,cAAL;AACA,aAAKC,WAAL;AACA,aAAKC,YAAL;AACE;;AAEF;AACEoD,UAAAA,aAAa,GAAGtD,cAAhB;AATJ;;AAYA,UAAIiD,qBAAqB,GAAGxB,oBAA5B;AACAA,MAAAA,oBAAoB,GAAG6B,aAAvB;;AAEA,UAAI;AACF,eAAOI,YAAY,EAAnB;AACD,OAFD,SAEU;AACRjC,QAAAA,oBAAoB,GAAGwB,qBAAvB;AACD;AACF;;AAED,aAASU,aAAT,CAAuBD,YAAvB,EAAqC;AACnC,UAAIJ,aAAJ;;AAEA,cAAQ7B,oBAAR;AACE,aAAK3B,iBAAL;AACA,aAAKC,oBAAL;AACA,aAAKC,cAAL;AACE;AACAsD,UAAAA,aAAa,GAAGtD,cAAhB;AACA;;AAEF;AACE;AACAsD,UAAAA,aAAa,GAAG7B,oBAAhB;AACA;AAXJ;;AAcA,UAAIwB,qBAAqB,GAAGxB,oBAA5B;AACAA,MAAAA,oBAAoB,GAAG6B,aAAvB;;AAEA,UAAI;AACF,eAAOI,YAAY,EAAnB;AACD,OAFD,SAEU;AACRjC,QAAAA,oBAAoB,GAAGwB,qBAAvB;AACD;AACF;;AAED,aAASW,qBAAT,CAA+BrB,QAA/B,EAAyC;AACvC,UAAIsB,mBAAmB,GAAGpC,oBAA1B;AACA,aAAO,YAAY;AACjB;AACA,YAAIwB,qBAAqB,GAAGxB,oBAA5B;AACAA,QAAAA,oBAAoB,GAAGoC,mBAAvB;;AAEA,YAAI;AACF,iBAAOtB,QAAQ,CAACuB,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,SAFD,SAEU;AACRtC,UAAAA,oBAAoB,GAAGwB,qBAAvB;AACD;AACF,OAVD;AAWD;;AAED,aAASe,yBAAT,CAAmCV,aAAnC,EAAkDf,QAAlD,EAA4D0B,OAA5D,EAAqE;AACnE,UAAI5B,WAAW,GAAG3B,OAAO,CAACC,YAAR,EAAlB;AACA,UAAI6B,SAAJ;;AAEA,UAAI,OAAOyB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,YAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;;AAEA,YAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1C1B,UAAAA,SAAS,GAAGH,WAAW,GAAG6B,KAA1B;AACD,SAFD,MAEO;AACL1B,UAAAA,SAAS,GAAGH,WAAZ;AACD;AACF,OARD,MAQO;AACLG,QAAAA,SAAS,GAAGH,WAAZ;AACD;;AAED,UAAI8B,OAAJ;;AAEA,cAAQb,aAAR;AACE,aAAKxD,iBAAL;AACEqE,UAAAA,OAAO,GAAGnD,0BAAV;AACA;;AAEF,aAAKjB,oBAAL;AACEoE,UAAAA,OAAO,GAAGlD,8BAAV;AACA;;AAEF,aAAKf,YAAL;AACEiE,UAAAA,OAAO,GAAG/C,qBAAV;AACA;;AAEF,aAAKnB,WAAL;AACEkE,UAAAA,OAAO,GAAGhD,oBAAV;AACA;;AAEF,aAAKnB,cAAL;AACA;AACEmE,UAAAA,OAAO,GAAGjD,uBAAV;AACA;AApBJ;;AAuBA,UAAIuB,cAAc,GAAGD,SAAS,GAAG2B,OAAjC;AACA,UAAIC,OAAO,GAAG;AACZvE,QAAAA,EAAE,EAAE0B,aAAa,EADL;AAEZgB,QAAAA,QAAQ,EAAEA,QAFE;AAGZe,QAAAA,aAAa,EAAEA,aAHH;AAIZd,QAAAA,SAAS,EAAEA,SAJC;AAKZC,QAAAA,cAAc,EAAEA,cALJ;AAMZ7C,QAAAA,SAAS,EAAE,CAAC;AANA,OAAd;;AASA,UAAI4C,SAAS,GAAGH,WAAhB,EAA6B;AAC3B;AACA+B,QAAAA,OAAO,CAACxE,SAAR,GAAoB4C,SAApB;AACAnE,QAAAA,IAAI,CAACiD,UAAD,EAAa8C,OAAb,CAAJ;;AAEA,YAAIzF,IAAI,CAAC0C,SAAD,CAAJ,KAAoB,IAApB,IAA4B+C,OAAO,KAAKzF,IAAI,CAAC2C,UAAD,CAAhD,EAA8D;AAC5D;AACA,cAAIM,sBAAJ,EAA4B;AAC1B;AACAoB,YAAAA,iBAAiB;AAClB,WAHD,MAGO;AACLpB,YAAAA,sBAAsB,GAAG,IAAzB;AACD,WAP2D,CAO1D;;;AAGFkB,UAAAA,kBAAkB,CAACJ,aAAD,EAAgBF,SAAS,GAAGH,WAA5B,CAAlB;AACD;AACF,OAjBD,MAiBO;AACL+B,QAAAA,OAAO,CAACxE,SAAR,GAAoB6C,cAApB;AACApE,QAAAA,IAAI,CAACgD,SAAD,EAAY+C,OAAZ,CAAJ,CAFK,CAGL;;AAGA,YAAI,CAACzC,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,UAAAA,uBAAuB,GAAG,IAA1B;AACAgB,UAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD;AACF;;AAED,aAAOwB,OAAP;AACD;;AAED,aAASC,uBAAT,GAAmC,CAClC;;AAED,aAASC,0BAAT,GAAsC;AAEpC,UAAI,CAAC3C,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,QAAAA,uBAAuB,GAAG,IAA1B;AACAgB,QAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD;AACF;;AAED,aAAS2B,6BAAT,GAAyC;AACvC,aAAO5F,IAAI,CAAC0C,SAAD,CAAX;AACD;;AAED,aAASmD,uBAAT,CAAiCpE,IAAjC,EAAuC;AACrC;AACA;AAGAA,MAAAA,IAAI,CAACmC,QAAL,GAAgB,IAAhB;AACD;;AAED,aAASkC,gCAAT,GAA4C;AAC1C,aAAOhD,oBAAP;AACD;;AAED,QAAIiD,oBAAoB,GAAG,KAA3B;AACA,QAAIC,qBAAqB,GAAG,IAA5B;AACA,QAAIC,aAAa,GAAG,CAAC,CAArB,CAtdc,CAsdU;AACxB;AACA;AACA;;AAEA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,QAAQ,GAAG,CAAf,CA5dc,CA4dI;;AAElB,aAASzB,iBAAT,GAA6B;AAC3B;AACE;AACA;AACA,eAAO3C,OAAO,CAACC,YAAR,MAA0BmE,QAAjC;AACD;AACF;;AAED,aAASC,YAAT,GAAwB,CAEvB;;AAED,aAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,UAAIA,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAG,GAArB,EAA0B;AACxB;AACAhD,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiB,4DAA4D,0DAA7E;AACA;AACD;;AAED,UAAIgD,GAAG,GAAG,CAAV,EAAa;AACXJ,QAAAA,aAAa,GAAGK,IAAI,CAACC,KAAL,CAAW,OAAOF,GAAlB,CAAhB;AACD,OAFD,MAEO;AACL;AACAJ,QAAAA,aAAa,GAAG,CAAhB;AACD;AACF;;AAED,QAAIO,wBAAwB,GAAG,YAAY;AACzC,UAAIT,qBAAqB,KAAK,IAA9B,EAAoC;AAClC,YAAItC,WAAW,GAAG3B,OAAO,CAACC,YAAR,EAAlB,CADkC,CACQ;AAC1C;AACA;;AAEAmE,QAAAA,QAAQ,GAAGzC,WAAW,GAAGwC,aAAzB;AACA,YAAI9B,gBAAgB,GAAG,IAAvB,CANkC,CAML;AAC7B;AACA;AACA;AACA;AACA;;AAEA,YAAIsC,WAAW,GAAG,IAAlB;;AAEA,YAAI;AACFA,UAAAA,WAAW,GAAGV,qBAAqB,CAAC5B,gBAAD,EAAmBV,WAAnB,CAAnC;AACD,SAFD,SAEU;AACR,cAAIgD,WAAJ,EAAiB;AACf;AACA;AACAC,YAAAA,gCAAgC;AACjC,WAJD,MAIO;AACLZ,YAAAA,oBAAoB,GAAG,KAAvB;AACAC,YAAAA,qBAAqB,GAAG,IAAxB;AACD;AACF;AACF,OA3BD,MA2BO;AACLD,QAAAA,oBAAoB,GAAG,KAAvB;AACD,OA9BwC,CA8BvC;;AACH,KA/BD;;AAiCA,QAAIY,gCAAJ;;AAEA,QAAI,OAAOtD,YAAP,KAAwB,UAA5B,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAsD,MAAAA,gCAAgC,GAAG,YAAY;AAC7CtD,QAAAA,YAAY,CAACoD,wBAAD,CAAZ;AACD,OAFD;AAGD,KAfD,MAeO;AACL,UAAIG,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,UAAIC,IAAI,GAAGF,OAAO,CAACG,KAAnB;AACAH,MAAAA,OAAO,CAACI,KAAR,CAAcC,SAAd,GAA0BR,wBAA1B;;AAEAE,MAAAA,gCAAgC,GAAG,YAAY;AAC7CG,QAAAA,IAAI,CAACI,WAAL,CAAiB,IAAjB;AACD,OAFD;AAGD;;AAED,aAASlD,mBAAT,CAA6BJ,QAA7B,EAAuC;AACrCoC,MAAAA,qBAAqB,GAAGpC,QAAxB;;AAEA,UAAI,CAACmC,oBAAL,EAA2B;AACzBA,QAAAA,oBAAoB,GAAG,IAAvB;AACAY,QAAAA,gCAAgC;AACjC;AACF;;AAED,aAASxC,kBAAT,CAA4BP,QAA5B,EAAsClC,EAAtC,EAA0C;AACxCuE,MAAAA,aAAa,GAAG/C,UAAU,CAAC,YAAY;AACrCU,QAAAA,QAAQ,CAAC7B,OAAO,CAACC,YAAR,EAAD,CAAR;AACD,OAFyB,EAEvBN,EAFuB,CAA1B;AAGD;;AAED,aAAS2C,iBAAT,GAA6B;AAC3BjB,MAAAA,YAAY,CAAC6C,aAAD,CAAZ;AACAA,MAAAA,aAAa,GAAG,CAAC,CAAjB;AACD;;AAED,QAAIkB,qBAAqB,GAAGf,YAA5B;AACA,QAAIgB,kBAAkB,GAAI,IAA1B;AAEArF,IAAAA,OAAO,CAACsF,qBAAR,GAAgC9F,YAAhC;AACAQ,IAAAA,OAAO,CAACuF,0BAAR,GAAqCnG,iBAArC;AACAY,IAAAA,OAAO,CAACwF,oBAAR,GAA+BjG,WAA/B;AACAS,IAAAA,OAAO,CAACyF,uBAAR,GAAkCnG,cAAlC;AACAU,IAAAA,OAAO,CAACqF,kBAAR,GAA6BA,kBAA7B;AACArF,IAAAA,OAAO,CAAC0F,6BAAR,GAAwCrG,oBAAxC;AACAW,IAAAA,OAAO,CAAC8D,uBAAR,GAAkCA,uBAAlC;AACA9D,IAAAA,OAAO,CAAC4D,0BAAR,GAAqCA,0BAArC;AACA5D,IAAAA,OAAO,CAAC2F,uBAAR,GAAkCrB,cAAlC;AACAtE,IAAAA,OAAO,CAAC+D,gCAAR,GAA2CA,gCAA3C;AACA/D,IAAAA,OAAO,CAAC6D,6BAAR,GAAwCA,6BAAxC;AACA7D,IAAAA,OAAO,CAACiD,aAAR,GAAwBA,aAAxB;AACAjD,IAAAA,OAAO,CAAC2D,uBAAR,GAAkCA,uBAAlC;AACA3D,IAAAA,OAAO,CAACoF,qBAAR,GAAgCA,qBAAhC;AACApF,IAAAA,OAAO,CAAC+C,wBAAR,GAAmCA,wBAAnC;AACA/C,IAAAA,OAAO,CAACsD,yBAAR,GAAoCA,yBAApC;AACAtD,IAAAA,OAAO,CAAC4F,oBAAR,GAA+BjD,iBAA/B;AACA3C,IAAAA,OAAO,CAACkD,qBAAR,GAAgCA,qBAAhC;AACG,GA9lBD;AA+lBD","sourcesContent":["/** @license React vundefined\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = false;\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\nvar setTimeout = window.setTimeout;\nvar clearTimeout = window.clearTimeout;\nvar setImmediate = window.setImmediate; // IE and Node.js + jsdom\n\nif (typeof console !== 'undefined') {\n  // TODO: Scheduler no longer requires these methods to be polyfilled. But\n  // maybe we want to continue warning if they don't exist, to preserve the\n  // option to rely on it in the future?\n  var requestAnimationFrame = window.requestAnimationFrame;\n  var cancelAnimationFrame = window.cancelAnimationFrame;\n\n  if (typeof requestAnimationFrame !== 'function') {\n    // Using console['error'] to evade Babel and ESLint\n    console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n  }\n\n  if (typeof cancelAnimationFrame !== 'function') {\n    // Using console['error'] to evade Babel and ESLint\n    console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n  }\n}\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nvar isMessageLoopRunning = false;\nvar scheduledHostCallback = null;\nvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\n\nvar yieldInterval = 5;\nvar deadline = 0; // TODO: Make this configurable\n\nfunction shouldYieldToHost() {\n  {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    return exports.unstable_now() >= deadline;\n  }\n}\n\nfunction requestPaint() {\n\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n    return;\n  }\n\n  if (fps > 0) {\n    yieldInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    yieldInterval = 5;\n  }\n}\n\nvar performWorkUntilDeadline = function () {\n  if (scheduledHostCallback !== null) {\n    var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n    // cycle. This means there's always time remaining at the beginning of\n    // the message event.\n\n    deadline = currentTime + yieldInterval;\n    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n    var hasMoreWork = true;\n\n    try {\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  } // Yielding to the browser will give it a chance to paint, so we can\n};\n\nvar schedulePerformWorkUntilDeadline;\n\nif (typeof setImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = function () {\n    setImmediate(performWorkUntilDeadline);\n  };\n} else {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  schedulePerformWorkUntilDeadline = function () {\n    port.postMessage(null);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = setTimeout(function () {\n    callback(exports.unstable_now());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  clearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}\n"]},"metadata":{},"sourceType":"script"}