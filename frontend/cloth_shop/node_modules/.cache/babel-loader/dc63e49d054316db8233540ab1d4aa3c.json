{"ast":null,"code":"/** @license React vundefined\n * scheduler-unstable_no_dom.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var enableSchedulerDebugging = false;\n    var enableProfiling = false;\n\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n\n    function peek(heap) {\n      var first = heap[0];\n      return first === undefined ? null : first;\n    }\n\n    function pop(heap) {\n      var first = heap[0];\n\n      if (first !== undefined) {\n        var last = heap.pop();\n\n        if (last !== first) {\n          heap[0] = last;\n          siftDown(heap, last, 0);\n        }\n\n        return first;\n      } else {\n        return null;\n      }\n    }\n\n    function siftUp(heap, node, i) {\n      var index = i;\n\n      while (true) {\n        var parentIndex = index - 1 >>> 1;\n        var parent = heap[parentIndex];\n\n        if (parent !== undefined && compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n\n      while (index < length) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (left !== undefined && compare(left, node) < 0) {\n          if (right !== undefined && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (right !== undefined && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    } // TODO: Use symbols?\n\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n\n    function markTaskErrored(task, ms) {}\n    /* eslint-disable no-var */\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n    if (hasPerformanceNow) {\n      var localPerformance = performance;\n\n      exports.unstable_now = function () {\n        return localPerformance.now();\n      };\n    } else {\n      var localDate = Date;\n      var initialTime = localDate.now();\n\n      exports.unstable_now = function () {\n        return localDate.now() - initialTime;\n      };\n    }\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n\n        timer = peek(timerQueue);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = exports.unstable_now();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            throw error;\n          }\n        } else {\n          // No catch in prod code path.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n      }\n    }\n\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n\n      while (currentTask !== null && !enableSchedulerDebugging) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n\n        var callback = currentTask.callback;\n\n        if (typeof callback === 'function') {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = exports.unstable_now();\n\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n          } else {\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n\n        return false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n      } else {\n        startTime = currentTime;\n      }\n\n      var timeout;\n\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n          break;\n\n        case UserBlockingPriority:\n          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n          break;\n\n        case IdlePriority:\n          timeout = IDLE_PRIORITY_TIMEOUT;\n          break;\n\n        case LowPriority:\n          timeout = LOW_PRIORITY_TIMEOUT;\n          break;\n\n        case NormalPriority:\n        default:\n          timeout = NORMAL_PRIORITY_TIMEOUT;\n          break;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask); // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function unstable_pauseExecution() {}\n\n    function unstable_continueExecution() {\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n\n    function unstable_cancelCallback(task) {\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n      task.callback = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    } // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n    // fallback to a naive implementation.\n\n\n    var _callback = null;\n    var _timeoutID = null;\n\n    var _flushCallback = function () {\n      if (_callback !== null) {\n        try {\n          var currentTime = exports.unstable_now();\n          var hasRemainingTime = true;\n\n          _callback(hasRemainingTime, currentTime);\n\n          _callback = null;\n        } catch (e) {\n          setTimeout(_flushCallback, 0);\n          throw e;\n        }\n      }\n    };\n\n    function requestHostCallback(cb) {\n      if (_callback !== null) {\n        // Protect against re-entrancy.\n        setTimeout(requestHostCallback, 0, cb);\n      } else {\n        _callback = cb;\n        setTimeout(_flushCallback, 0);\n      }\n    }\n\n    function requestHostTimeout(cb, ms) {\n      _timeoutID = setTimeout(cb, ms);\n    }\n\n    function cancelHostTimeout() {\n      clearTimeout(_timeoutID);\n    }\n\n    function shouldYieldToHost() {\n      return false;\n    }\n\n    function forceFrameRate() {}\n\n    function requestPaint() {}\n\n    var unstable_Profiling = null;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_Profiling = unstable_Profiling;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_forceFrameRate = forceFrameRate;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_next = unstable_next;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_requestPaint = requestPaint;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_shouldYield = shouldYieldToHost;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}","map":{"version":3,"sources":["E:/django_projects/cloth_shop_django_react/frontend/cloth_shop/node_modules/scheduler/cjs/scheduler-unstable_no_dom.development.js"],"names":["process","env","NODE_ENV","enableSchedulerDebugging","enableProfiling","push","heap","node","index","length","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","hasPerformanceNow","performance","now","localPerformance","exports","unstable_now","localDate","Date","initialTime","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","cancelHostTimeout","previousPriorityLevel","workLoop","error","isQueued","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","_callback","_timeoutID","_flushCallback","hasRemainingTime","e","setTimeout","cb","clearTimeout","forceFrameRate","requestPaint","unstable_Profiling","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority","unstable_forceFrameRate","unstable_requestPaint","unstable_shouldYield"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,GAAC,YAAW;AACd;;AAEA,QAAIC,wBAAwB,GAAG,KAA/B;AACA,QAAIC,eAAe,GAAG,KAAtB;;AAEA,aAASC,IAAT,CAAcC,IAAd,EAAoBC,IAApB,EAA0B;AACxB,UAAIC,KAAK,GAAGF,IAAI,CAACG,MAAjB;AACAH,MAAAA,IAAI,CAACD,IAAL,CAAUE,IAAV;AACAG,MAAAA,MAAM,CAACJ,IAAD,EAAOC,IAAP,EAAaC,KAAb,CAAN;AACD;;AACD,aAASG,IAAT,CAAcL,IAAd,EAAoB;AAClB,UAAIM,KAAK,GAAGN,IAAI,CAAC,CAAD,CAAhB;AACA,aAAOM,KAAK,KAAKC,SAAV,GAAsB,IAAtB,GAA6BD,KAApC;AACD;;AACD,aAASE,GAAT,CAAaR,IAAb,EAAmB;AACjB,UAAIM,KAAK,GAAGN,IAAI,CAAC,CAAD,CAAhB;;AAEA,UAAIM,KAAK,KAAKC,SAAd,EAAyB;AACvB,YAAIE,IAAI,GAAGT,IAAI,CAACQ,GAAL,EAAX;;AAEA,YAAIC,IAAI,KAAKH,KAAb,EAAoB;AAClBN,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUS,IAAV;AACAC,UAAAA,QAAQ,CAACV,IAAD,EAAOS,IAAP,EAAa,CAAb,CAAR;AACD;;AAED,eAAOH,KAAP;AACD,OATD,MASO;AACL,eAAO,IAAP;AACD;AACF;;AAED,aAASF,MAAT,CAAgBJ,IAAhB,EAAsBC,IAAtB,EAA4BU,CAA5B,EAA+B;AAC7B,UAAIT,KAAK,GAAGS,CAAZ;;AAEA,aAAO,IAAP,EAAa;AACX,YAAIC,WAAW,GAAGV,KAAK,GAAG,CAAR,KAAc,CAAhC;AACA,YAAIW,MAAM,GAAGb,IAAI,CAACY,WAAD,CAAjB;;AAEA,YAAIC,MAAM,KAAKN,SAAX,IAAwBO,OAAO,CAACD,MAAD,EAASZ,IAAT,CAAP,GAAwB,CAApD,EAAuD;AACrD;AACAD,UAAAA,IAAI,CAACY,WAAD,CAAJ,GAAoBX,IAApB;AACAD,UAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcW,MAAd;AACAX,UAAAA,KAAK,GAAGU,WAAR;AACD,SALD,MAKO;AACL;AACA;AACD;AACF;AACF;;AAED,aAASF,QAAT,CAAkBV,IAAlB,EAAwBC,IAAxB,EAA8BU,CAA9B,EAAiC;AAC/B,UAAIT,KAAK,GAAGS,CAAZ;AACA,UAAIR,MAAM,GAAGH,IAAI,CAACG,MAAlB;;AAEA,aAAOD,KAAK,GAAGC,MAAf,EAAuB;AACrB,YAAIY,SAAS,GAAG,CAACb,KAAK,GAAG,CAAT,IAAc,CAAd,GAAkB,CAAlC;AACA,YAAIc,IAAI,GAAGhB,IAAI,CAACe,SAAD,CAAf;AACA,YAAIE,UAAU,GAAGF,SAAS,GAAG,CAA7B;AACA,YAAIG,KAAK,GAAGlB,IAAI,CAACiB,UAAD,CAAhB,CAJqB,CAIS;;AAE9B,YAAID,IAAI,KAAKT,SAAT,IAAsBO,OAAO,CAACE,IAAD,EAAOf,IAAP,CAAP,GAAsB,CAAhD,EAAmD;AACjD,cAAIiB,KAAK,KAAKX,SAAV,IAAuBO,OAAO,CAACI,KAAD,EAAQF,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AACnDhB,YAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcgB,KAAd;AACAlB,YAAAA,IAAI,CAACiB,UAAD,CAAJ,GAAmBhB,IAAnB;AACAC,YAAAA,KAAK,GAAGe,UAAR;AACD,WAJD,MAIO;AACLjB,YAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcc,IAAd;AACAhB,YAAAA,IAAI,CAACe,SAAD,CAAJ,GAAkBd,IAAlB;AACAC,YAAAA,KAAK,GAAGa,SAAR;AACD;AACF,SAVD,MAUO,IAAIG,KAAK,KAAKX,SAAV,IAAuBO,OAAO,CAACI,KAAD,EAAQjB,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AAC1DD,UAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcgB,KAAd;AACAlB,UAAAA,IAAI,CAACiB,UAAD,CAAJ,GAAmBhB,IAAnB;AACAC,UAAAA,KAAK,GAAGe,UAAR;AACD,SAJM,MAIA;AACL;AACA;AACD;AACF;AACF;;AAED,aAASH,OAAT,CAAiBK,CAAjB,EAAoBC,CAApB,EAAuB;AACrB;AACA,UAAIC,IAAI,GAAGF,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAA3B;AACA,aAAOD,IAAI,KAAK,CAAT,GAAaA,IAAb,GAAoBF,CAAC,CAACI,EAAF,GAAOH,CAAC,CAACG,EAApC;AACD,KAtFa,CAwFd;;;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,oBAAoB,GAAG,CAA3B;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,YAAY,GAAG,CAAnB;;AAEA,aAASC,eAAT,CAAyBC,IAAzB,EAA+BC,EAA/B,EAAmC,CAClC;AAED;AACA;AACA;;;AAEA,QAAIC,iBAAiB,GAAG,UAAxB,CAtGc,CAsGsB;;AAEpC,QAAIC,0BAA0B,GAAG,CAAC,CAAlC,CAxGc,CAwGuB;;AAErC,QAAIC,8BAA8B,GAAG,GAArC;AACA,QAAIC,uBAAuB,GAAG,IAA9B;AACA,QAAIC,oBAAoB,GAAG,KAA3B,CA5Gc,CA4GoB;;AAElC,QAAIC,qBAAqB,GAAGL,iBAA5B,CA9Gc,CA8GiC;;AAE/C,QAAIM,SAAS,GAAG,EAAhB;AACA,QAAIC,UAAU,GAAG,EAAjB,CAjHc,CAiHO;;AAErB,QAAIC,aAAa,GAAG,CAApB,CAnHc,CAmHS;;AACvB,QAAIC,WAAW,GAAG,IAAlB;AACA,QAAIC,oBAAoB,GAAGhB,cAA3B,CArHc,CAqH6B;;AAE3C,QAAIiB,gBAAgB,GAAG,KAAvB;AACA,QAAIC,uBAAuB,GAAG,KAA9B;AACA,QAAIC,sBAAsB,GAAG,KAA7B;AAEA,QAAIC,iBAAiB,GAAG,OAAOC,WAAP,KAAuB,QAAvB,IAAmC,OAAOA,WAAW,CAACC,GAAnB,KAA2B,UAAtF;;AAEA,QAAIF,iBAAJ,EAAuB;AACrB,UAAIG,gBAAgB,GAAGF,WAAvB;;AAEAG,MAAAA,OAAO,CAACC,YAAR,GAAuB,YAAY;AACjC,eAAOF,gBAAgB,CAACD,GAAjB,EAAP;AACD,OAFD;AAGD,KAND,MAMO;AACL,UAAII,SAAS,GAAGC,IAAhB;AACA,UAAIC,WAAW,GAAGF,SAAS,CAACJ,GAAV,EAAlB;;AAEAE,MAAAA,OAAO,CAACC,YAAR,GAAuB,YAAY;AACjC,eAAOC,SAAS,CAACJ,GAAV,KAAkBM,WAAzB;AACD,OAFD;AAGD;;AAED,aAASC,aAAT,CAAuBC,WAAvB,EAAoC;AAClC;AACA,UAAIC,KAAK,GAAGpD,IAAI,CAACkC,UAAD,CAAhB;;AAEA,aAAOkB,KAAK,KAAK,IAAjB,EAAuB;AACrB,YAAIA,KAAK,CAACC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B;AACAlD,UAAAA,GAAG,CAAC+B,UAAD,CAAH;AACD,SAHD,MAGO,IAAIkB,KAAK,CAACE,SAAN,IAAmBH,WAAvB,EAAoC;AACzC;AACAhD,UAAAA,GAAG,CAAC+B,UAAD,CAAH;AACAkB,UAAAA,KAAK,CAACnC,SAAN,GAAkBmC,KAAK,CAACG,cAAxB;AACA7D,UAAAA,IAAI,CAACuC,SAAD,EAAYmB,KAAZ,CAAJ;AACD,SALM,MAKA;AACL;AACA;AACD;;AAEDA,QAAAA,KAAK,GAAGpD,IAAI,CAACkC,UAAD,CAAZ;AACD;AACF;;AAED,aAASsB,aAAT,CAAuBL,WAAvB,EAAoC;AAClCX,MAAAA,sBAAsB,GAAG,KAAzB;AACAU,MAAAA,aAAa,CAACC,WAAD,CAAb;;AAEA,UAAI,CAACZ,uBAAL,EAA8B;AAC5B,YAAIvC,IAAI,CAACiC,SAAD,CAAJ,KAAoB,IAAxB,EAA8B;AAC5BM,UAAAA,uBAAuB,GAAG,IAA1B;AACAkB,UAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD,SAHD,MAGO;AACL,cAAIC,UAAU,GAAG3D,IAAI,CAACkC,UAAD,CAArB;;AAEA,cAAIyB,UAAU,KAAK,IAAnB,EAAyB;AACvBC,YAAAA,kBAAkB,CAACJ,aAAD,EAAgBG,UAAU,CAACL,SAAX,GAAuBH,WAAvC,CAAlB;AACD;AACF;AACF;AACF;;AAED,aAASO,SAAT,CAAmBG,gBAAnB,EAAqCZ,WAArC,EAAkD;AAGhDV,MAAAA,uBAAuB,GAAG,KAA1B;;AAEA,UAAIC,sBAAJ,EAA4B;AAC1B;AACAA,QAAAA,sBAAsB,GAAG,KAAzB;AACAsB,QAAAA,iBAAiB;AAClB;;AAEDxB,MAAAA,gBAAgB,GAAG,IAAnB;AACA,UAAIyB,qBAAqB,GAAG1B,oBAA5B;;AAEA,UAAI;AACF,YAAI5C,eAAJ,EAAqB;AACnB,cAAI;AACF,mBAAOuE,QAAQ,CAACH,gBAAD,EAAmBZ,WAAnB,CAAf;AACD,WAFD,CAEE,OAAOgB,KAAP,EAAc;AACd,gBAAI7B,WAAW,KAAK,IAApB,EAA0B;AACxB,kBAAIe,WAAW,GAAGN,OAAO,CAACC,YAAR,EAAlB;AACAtB,cAAAA,eAAe,CAACY,WAAD,EAAce,WAAd,CAAf;AACAf,cAAAA,WAAW,CAAC8B,QAAZ,GAAuB,KAAvB;AACD;;AAED,kBAAMD,KAAN;AACD;AACF,SAZD,MAYO;AACL;AACA,iBAAOD,QAAQ,CAACH,gBAAD,EAAmBZ,WAAnB,CAAf;AACD;AACF,OAjBD,SAiBU;AACRb,QAAAA,WAAW,GAAG,IAAd;AACAC,QAAAA,oBAAoB,GAAG0B,qBAAvB;AACAzB,QAAAA,gBAAgB,GAAG,KAAnB;AACD;AACF;;AAED,aAAS0B,QAAT,CAAkBH,gBAAlB,EAAoCZ,WAApC,EAAiD;AAC/C,UAAIE,WAAW,GAAGF,WAAlB;AACAC,MAAAA,aAAa,CAACC,WAAD,CAAb;AACAf,MAAAA,WAAW,GAAGpC,IAAI,CAACiC,SAAD,CAAlB;;AAEA,aAAOG,WAAW,KAAK,IAAhB,IAAwB,CAAE5C,wBAAjC,EAA6D;AAC3D,YAAI4C,WAAW,CAACmB,cAAZ,GAA6BJ,WAA7B,KAA6C,CAACU,gBAAD,IAAqBM,iBAAiB,EAAnF,CAAJ,EAA4F;AAC1F;AACA;AACD;;AAED,YAAId,QAAQ,GAAGjB,WAAW,CAACiB,QAA3B;;AAEA,YAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCjB,UAAAA,WAAW,CAACiB,QAAZ,GAAuB,IAAvB;AACAhB,UAAAA,oBAAoB,GAAGD,WAAW,CAACgC,aAAnC;AACA,cAAIC,sBAAsB,GAAGjC,WAAW,CAACmB,cAAZ,IAA8BJ,WAA3D;AAEA,cAAImB,oBAAoB,GAAGjB,QAAQ,CAACgB,sBAAD,CAAnC;AACAlB,UAAAA,WAAW,GAAGN,OAAO,CAACC,YAAR,EAAd;;AAEA,cAAI,OAAOwB,oBAAP,KAAgC,UAApC,EAAgD;AAC9ClC,YAAAA,WAAW,CAACiB,QAAZ,GAAuBiB,oBAAvB;AACD,WAFD,MAEO;AAEL,gBAAIlC,WAAW,KAAKpC,IAAI,CAACiC,SAAD,CAAxB,EAAqC;AACnC9B,cAAAA,GAAG,CAAC8B,SAAD,CAAH;AACD;AACF;;AAEDiB,UAAAA,aAAa,CAACC,WAAD,CAAb;AACD,SAlBD,MAkBO;AACLhD,UAAAA,GAAG,CAAC8B,SAAD,CAAH;AACD;;AAEDG,QAAAA,WAAW,GAAGpC,IAAI,CAACiC,SAAD,CAAlB;AACD,OApC8C,CAoC7C;;;AAGF,UAAIG,WAAW,KAAK,IAApB,EAA0B;AACxB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAIuB,UAAU,GAAG3D,IAAI,CAACkC,UAAD,CAArB;;AAEA,YAAIyB,UAAU,KAAK,IAAnB,EAAyB;AACvBC,UAAAA,kBAAkB,CAACJ,aAAD,EAAgBG,UAAU,CAACL,SAAX,GAAuBH,WAAvC,CAAlB;AACD;;AAED,eAAO,KAAP;AACD;AACF;;AAED,aAASoB,wBAAT,CAAkCH,aAAlC,EAAiDI,YAAjD,EAA+D;AAC7D,cAAQJ,aAAR;AACE,aAAKjD,iBAAL;AACA,aAAKC,oBAAL;AACA,aAAKC,cAAL;AACA,aAAKC,WAAL;AACA,aAAKC,YAAL;AACE;;AAEF;AACE6C,UAAAA,aAAa,GAAG/C,cAAhB;AATJ;;AAYA,UAAI0C,qBAAqB,GAAG1B,oBAA5B;AACAA,MAAAA,oBAAoB,GAAG+B,aAAvB;;AAEA,UAAI;AACF,eAAOI,YAAY,EAAnB;AACD,OAFD,SAEU;AACRnC,QAAAA,oBAAoB,GAAG0B,qBAAvB;AACD;AACF;;AAED,aAASU,aAAT,CAAuBD,YAAvB,EAAqC;AACnC,UAAIJ,aAAJ;;AAEA,cAAQ/B,oBAAR;AACE,aAAKlB,iBAAL;AACA,aAAKC,oBAAL;AACA,aAAKC,cAAL;AACE;AACA+C,UAAAA,aAAa,GAAG/C,cAAhB;AACA;;AAEF;AACE;AACA+C,UAAAA,aAAa,GAAG/B,oBAAhB;AACA;AAXJ;;AAcA,UAAI0B,qBAAqB,GAAG1B,oBAA5B;AACAA,MAAAA,oBAAoB,GAAG+B,aAAvB;;AAEA,UAAI;AACF,eAAOI,YAAY,EAAnB;AACD,OAFD,SAEU;AACRnC,QAAAA,oBAAoB,GAAG0B,qBAAvB;AACD;AACF;;AAED,aAASW,qBAAT,CAA+BrB,QAA/B,EAAyC;AACvC,UAAIsB,mBAAmB,GAAGtC,oBAA1B;AACA,aAAO,YAAY;AACjB;AACA,YAAI0B,qBAAqB,GAAG1B,oBAA5B;AACAA,QAAAA,oBAAoB,GAAGsC,mBAAvB;;AAEA,YAAI;AACF,iBAAOtB,QAAQ,CAACuB,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,SAFD,SAEU;AACRxC,UAAAA,oBAAoB,GAAG0B,qBAAvB;AACD;AACF,OAVD;AAWD;;AAED,aAASe,yBAAT,CAAmCV,aAAnC,EAAkDf,QAAlD,EAA4D0B,OAA5D,EAAqE;AACnE,UAAI5B,WAAW,GAAGN,OAAO,CAACC,YAAR,EAAlB;AACA,UAAIQ,SAAJ;;AAEA,UAAI,OAAOyB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,YAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;;AAEA,YAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1C1B,UAAAA,SAAS,GAAGH,WAAW,GAAG6B,KAA1B;AACD,SAFD,MAEO;AACL1B,UAAAA,SAAS,GAAGH,WAAZ;AACD;AACF,OARD,MAQO;AACLG,QAAAA,SAAS,GAAGH,WAAZ;AACD;;AAED,UAAI8B,OAAJ;;AAEA,cAAQb,aAAR;AACE,aAAKjD,iBAAL;AACE8D,UAAAA,OAAO,GAAGrD,0BAAV;AACA;;AAEF,aAAKR,oBAAL;AACE6D,UAAAA,OAAO,GAAGpD,8BAAV;AACA;;AAEF,aAAKN,YAAL;AACE0D,UAAAA,OAAO,GAAGjD,qBAAV;AACA;;AAEF,aAAKV,WAAL;AACE2D,UAAAA,OAAO,GAAGlD,oBAAV;AACA;;AAEF,aAAKV,cAAL;AACA;AACE4D,UAAAA,OAAO,GAAGnD,uBAAV;AACA;AApBJ;;AAuBA,UAAIyB,cAAc,GAAGD,SAAS,GAAG2B,OAAjC;AACA,UAAIC,OAAO,GAAG;AACZhE,QAAAA,EAAE,EAAEiB,aAAa,EADL;AAEZkB,QAAAA,QAAQ,EAAEA,QAFE;AAGZe,QAAAA,aAAa,EAAEA,aAHH;AAIZd,QAAAA,SAAS,EAAEA,SAJC;AAKZC,QAAAA,cAAc,EAAEA,cALJ;AAMZtC,QAAAA,SAAS,EAAE,CAAC;AANA,OAAd;;AASA,UAAIqC,SAAS,GAAGH,WAAhB,EAA6B;AAC3B;AACA+B,QAAAA,OAAO,CAACjE,SAAR,GAAoBqC,SAApB;AACA5D,QAAAA,IAAI,CAACwC,UAAD,EAAagD,OAAb,CAAJ;;AAEA,YAAIlF,IAAI,CAACiC,SAAD,CAAJ,KAAoB,IAApB,IAA4BiD,OAAO,KAAKlF,IAAI,CAACkC,UAAD,CAAhD,EAA8D;AAC5D;AACA,cAAIM,sBAAJ,EAA4B;AAC1B;AACAsB,YAAAA,iBAAiB;AAClB,WAHD,MAGO;AACLtB,YAAAA,sBAAsB,GAAG,IAAzB;AACD,WAP2D,CAO1D;;;AAGFoB,UAAAA,kBAAkB,CAACJ,aAAD,EAAgBF,SAAS,GAAGH,WAA5B,CAAlB;AACD;AACF,OAjBD,MAiBO;AACL+B,QAAAA,OAAO,CAACjE,SAAR,GAAoBsC,cAApB;AACA7D,QAAAA,IAAI,CAACuC,SAAD,EAAYiD,OAAZ,CAAJ,CAFK,CAGL;;AAGA,YAAI,CAAC3C,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,UAAAA,uBAAuB,GAAG,IAA1B;AACAkB,UAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD;AACF;;AAED,aAAOwB,OAAP;AACD;;AAED,aAASC,uBAAT,GAAmC,CAClC;;AAED,aAASC,0BAAT,GAAsC;AAEpC,UAAI,CAAC7C,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,QAAAA,uBAAuB,GAAG,IAA1B;AACAkB,QAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD;AACF;;AAED,aAAS2B,6BAAT,GAAyC;AACvC,aAAOrF,IAAI,CAACiC,SAAD,CAAX;AACD;;AAED,aAASqD,uBAAT,CAAiC7D,IAAjC,EAAuC;AACrC;AACA;AAGAA,MAAAA,IAAI,CAAC4B,QAAL,GAAgB,IAAhB;AACD;;AAED,aAASkC,gCAAT,GAA4C;AAC1C,aAAOlD,oBAAP;AACD,KA3ba,CA2bZ;AACF;;;AAGA,QAAImD,SAAS,GAAG,IAAhB;AACA,QAAIC,UAAU,GAAG,IAAjB;;AAEA,QAAIC,cAAc,GAAG,YAAY;AAC/B,UAAIF,SAAS,KAAK,IAAlB,EAAwB;AACtB,YAAI;AACF,cAAIrC,WAAW,GAAGN,OAAO,CAACC,YAAR,EAAlB;AACA,cAAI6C,gBAAgB,GAAG,IAAvB;;AAEAH,UAAAA,SAAS,CAACG,gBAAD,EAAmBxC,WAAnB,CAAT;;AAEAqC,UAAAA,SAAS,GAAG,IAAZ;AACD,SAPD,CAOE,OAAOI,CAAP,EAAU;AACVC,UAAAA,UAAU,CAACH,cAAD,EAAiB,CAAjB,CAAV;AACA,gBAAME,CAAN;AACD;AACF;AACF,KAdD;;AAgBA,aAASnC,mBAAT,CAA6BqC,EAA7B,EAAiC;AAC/B,UAAIN,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACAK,QAAAA,UAAU,CAACpC,mBAAD,EAAsB,CAAtB,EAAyBqC,EAAzB,CAAV;AACD,OAHD,MAGO;AACLN,QAAAA,SAAS,GAAGM,EAAZ;AACAD,QAAAA,UAAU,CAACH,cAAD,EAAiB,CAAjB,CAAV;AACD;AACF;;AAED,aAAS9B,kBAAT,CAA4BkC,EAA5B,EAAgCpE,EAAhC,EAAoC;AAClC+D,MAAAA,UAAU,GAAGI,UAAU,CAACC,EAAD,EAAKpE,EAAL,CAAvB;AACD;;AAED,aAASoC,iBAAT,GAA6B;AAC3BiC,MAAAA,YAAY,CAACN,UAAD,CAAZ;AACD;;AAED,aAAStB,iBAAT,GAA6B;AAC3B,aAAO,KAAP;AACD;;AAED,aAAS6B,cAAT,GAA0B,CAAE;;AAE5B,aAASC,YAAT,GAAwB,CAAE;;AAC1B,QAAIC,kBAAkB,GAAI,IAA1B;AAEArD,IAAAA,OAAO,CAACsD,qBAAR,GAAgC5E,YAAhC;AACAsB,IAAAA,OAAO,CAACuD,0BAAR,GAAqCjF,iBAArC;AACA0B,IAAAA,OAAO,CAACwD,oBAAR,GAA+B/E,WAA/B;AACAuB,IAAAA,OAAO,CAACyD,uBAAR,GAAkCjF,cAAlC;AACAwB,IAAAA,OAAO,CAACqD,kBAAR,GAA6BA,kBAA7B;AACArD,IAAAA,OAAO,CAAC0D,6BAAR,GAAwCnF,oBAAxC;AACAyB,IAAAA,OAAO,CAACyC,uBAAR,GAAkCA,uBAAlC;AACAzC,IAAAA,OAAO,CAACuC,0BAAR,GAAqCA,0BAArC;AACAvC,IAAAA,OAAO,CAAC2D,uBAAR,GAAkCR,cAAlC;AACAnD,IAAAA,OAAO,CAAC0C,gCAAR,GAA2CA,gCAA3C;AACA1C,IAAAA,OAAO,CAACwC,6BAAR,GAAwCA,6BAAxC;AACAxC,IAAAA,OAAO,CAAC4B,aAAR,GAAwBA,aAAxB;AACA5B,IAAAA,OAAO,CAACsC,uBAAR,GAAkCA,uBAAlC;AACAtC,IAAAA,OAAO,CAAC4D,qBAAR,GAAgCR,YAAhC;AACApD,IAAAA,OAAO,CAAC0B,wBAAR,GAAmCA,wBAAnC;AACA1B,IAAAA,OAAO,CAACiC,yBAAR,GAAoCA,yBAApC;AACAjC,IAAAA,OAAO,CAAC6D,oBAAR,GAA+BvC,iBAA/B;AACAtB,IAAAA,OAAO,CAAC6B,qBAAR,GAAgCA,qBAAhC;AACG,GA/fD;AAggBD","sourcesContent":["/** @license React vundefined\n * scheduler-unstable_no_dom.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = false;\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n}\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n} // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n// fallback to a naive implementation.\n\n\nvar _callback = null;\nvar _timeoutID = null;\n\nvar _flushCallback = function () {\n  if (_callback !== null) {\n    try {\n      var currentTime = exports.unstable_now();\n      var hasRemainingTime = true;\n\n      _callback(hasRemainingTime, currentTime);\n\n      _callback = null;\n    } catch (e) {\n      setTimeout(_flushCallback, 0);\n      throw e;\n    }\n  }\n};\n\nfunction requestHostCallback(cb) {\n  if (_callback !== null) {\n    // Protect against re-entrancy.\n    setTimeout(requestHostCallback, 0, cb);\n  } else {\n    _callback = cb;\n    setTimeout(_flushCallback, 0);\n  }\n}\n\nfunction requestHostTimeout(cb, ms) {\n  _timeoutID = setTimeout(cb, ms);\n}\n\nfunction cancelHostTimeout() {\n  clearTimeout(_timeoutID);\n}\n\nfunction shouldYieldToHost() {\n  return false;\n}\n\nfunction forceFrameRate() {}\n\nfunction requestPaint() {}\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}\n"]},"metadata":{},"sourceType":"script"}